# This workflow validates, deploys, and runs the specified bundle
# within a production target named "prod".
name: Release

on:
   pull_request:
    branches:
      - main
      - development
    types:
      - closed

jobs:

  release:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install Databricks CLI and Create Config File
        run: |
          # Install Databricks CLI
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh

          # Verify installation
          databricks --version

          # Create Databricks config file
          file="$HOME/.databrickscfg"

          # If exists, remove it
          if [ -f "$file" ] ; then
              rm "$file"
          fi

          # Define the profile
          echo "[YOUR_WORKSPACE_PROFILE]" >> $HOME/.databrickscfg
          echo "host = ${{ secrets.CLIENT_ID}}" >> $HOME/.databrickscfg
          echo "token = ${{secrets.DATABRICKS_TOKEN  }}" >> $HOME/.databrickscfg

          # Show the file (for debugging, remove in production)
          cat $HOME/.databrickscfg

          # Check profiles
          databricks auth profiles

          # Export token
          DATABRICKS_TOKEN_SP=$(curl --request POST \
            --url "https://adb-8413004091577872.12.azuredatabricks.net//oidc/v1/token" \
            --user "${{ secrets.SP_CLIENT_ID }}:${{ secrets.SP_CLIENT_SECRET }}" \
            --data 'grant_type=client_credentials&scope=all-apis' | jq -r '.access_token'
          )

          # Set environment variable
          echo "DATABRICKS_TOKEN_SP=$DATABRICKS_TOKEN_SP" >> $GITHUB_ENV
        shell: bash

      - name: Deploy Databricks Bundle
        run: |
          databricks bundle deploy --target dev
        env:
          DATABRICKS_HOST: ${{ secrets.CLIENT_ID}}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN  }}
      
  version:
    needs:  release
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.release.outputs.version }}
      released: ${{ steps.release.outputs.released }}
      tag: ${{ steps.release.outputs.tag }}
    steps:   
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release
        id: release
        uses: python-semantic-release/python-semantic-release@master
        with:
          git_committer_name: "GitHub Actions"
          git_committer_email: "luo14938@gmail.com"
          github_token: ${{ secrets.GH_TOKEN }}

      - name: Check Release     
        run: |
          echo "Version: ${{ steps.release.outputs.version }}"
          echo "Tag: ${{ steps.release.outputs.tag }}"
          echo "Released: ${{ steps.release.outputs.released }}"

          if [ "${{ steps.release.outputs.released }}" == "false" ]; then
            echo "No release created"
          fi
      

       
           
